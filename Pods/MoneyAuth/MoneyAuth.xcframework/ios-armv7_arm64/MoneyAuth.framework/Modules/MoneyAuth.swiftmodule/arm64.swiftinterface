// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MoneyAuth
import CommonCrypto
import Compression
import CoreGraphics
import CoreGraphics/*.CGFloat*/
import Dispatch
import Foundation
import FunctionalSwift
import FunctionalSwift/*.Either*/
import FunctionalSwift/*.Result*/
@_exported import MoneyAuth
import UIKit.NSLayoutConstraint
import QuartzCore
import SafariServices
import Swift
import TMXProfiling
import UIKit.UIColor
import UIKit.UIImage
import UIKit
import UIKit/*.UIImage*/
import UIKit/*.UILayoutGuide*/
import UIKit/*.UILayoutPriority*/
import UIKit/*.UITextField*/
import UIKit/*.UIView*/
import UIKit.UIPresentationController
import UIKit.UIResponder
import UIKit.UITableView
import UIKit.UITableViewCell
import UIKit.UITableViewHeaderFooterView
import UIKit.UIView
import UIKit.UIViewController
import WebKit
import YooMoneyCoreApi
import YooMoneyCoreApi/*.ApiResponse*/
import YooMoneyCoreApi/*.ApiSession*/
import YooMoneyCoreApi/*.Task*/
import os
public enum UnauthorizedError {
  case invalidCredentials
  case invalidSignature
  case invalidToken
  public static func == (a: MoneyAuth.UnauthorizedError, b: MoneyAuth.UnauthorizedError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension UnauthorizedError {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum DisplayNameAssembly {
  public static func makeModule(inputData: MoneyAuth.DisplayNameModuleInputData, moduleOutput: MoneyAuth.DisplayNameModuleOutput? = nil) -> UIKit.UIViewController
}
public enum TestScreenFactory {
  public static func makeSetUpPhoneModule(withOffers: Swift.Bool) -> UIKit.UIViewController
  public static func makeConfirmPhoneForEnrollmentModule(codeLength: Swift.Int) -> UIKit.UIViewController
  public static func makeChoosePhoneForMigrationModule() -> UIKit.UIViewController
  public static func makeChooseEmailForMigrationModule() -> UIKit.UIViewController
  public static func makeSetEmailModule(withOffers: Swift.Bool) -> UIKit.UIViewController
  public static func makeConfirmEmailForEnrollmentModule() -> UIKit.UIViewController
  public static func makeSetPasswordForEnrollmentModule() -> UIKit.UIViewController
  public static func makeAccountListModule() -> UIKit.UIViewController
  public static func makeEnterIdentifierModule() -> UIKit.UIViewController
  public static func makeConfirmPhoneForLoginModule(codeLength: Swift.Int) -> UIKit.UIViewController
  public static func makeConfirmEmailForLoginModule() -> UIKit.UIViewController
  public static func makeEnterPasswordModule(withAccount: Swift.Bool) -> UIKit.UIViewController
  public static func makeConfirmPhoneForMigrationModule(codeLength: Swift.Int) -> UIKit.UIViewController
  public static func makeConfirmPhoneForChangeEmailModule(codeLength: Swift.Int) -> UIKit.UIViewController
  public static func makeSetPasswordForMigrationModule() -> UIKit.UIViewController
  public static func makeConfirmEmailForMigrationModule() -> UIKit.UIViewController
  public static func makeConfirmEmailForChangeEmailModule() -> UIKit.UIViewController
  public static func makeEnterPasswordForChangeEmailModule() -> UIKit.UIViewController
  public static func makeSetEmailForChangeEmailModule() -> UIKit.UIViewController
  public static func makeEnterPhoneForPasswordRecoveryModule() -> UIKit.UIViewController
  public static func makeConfirmPhoneForPasswordRecoveryModule(codeLength: Swift.Int) -> UIKit.UIViewController
  public static func makeChooseAccountForPasswordRecoveryModule() -> UIKit.UIViewController
  public static func makeChooseCorporateAccountForPasswordRecoveryModule() -> UIKit.UIViewController
  public static func makeConfirmEmailForPasswordRecoveryModule() -> UIKit.UIViewController
  public static func makeSetPasswordForPasswordRecoveryModule() -> UIKit.UIViewController
  public static func makeSimpleInformationModule() -> UIKit.UIViewController
  public static func makeMigrationInformationModule() -> UIKit.UIViewController
  public static func makeNotRegisteredAccountModule() -> UIKit.UIViewController
  public static func initializeModulesOutput(viewController: UIKit.UIViewController)
}
extension UIButton {
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
}
public typealias AuthenticationChallengeHandler = ((Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)
public struct Config {
  public init(origin: MoneyAuth.Origin, clientId: Swift.String, host: Swift.String, isDevHost: Swift.Bool = false, applicationUserAgent: Swift.String? = nil, loggingEnabled: Swift.Bool = false, authenticationChallengeHandler: MoneyAuth.AuthenticationChallengeHandler? = nil, yxOauthClientId: Swift.String? = nil, supportEmail: Swift.String, supportPhone: Swift.String, supportHelpUrl: Foundation.URL, prefilledPhone: MoneyAuth.Config.PrefilledPhone? = nil)
}
extension Config {
  public struct PrefilledPhone {
    public let number: Swift.String
    public let countryCode: Swift.String
    public init(number: Swift.String, countryCode: Swift.String)
  }
}
public protocol AvatarViewInput : AnyObject {
  var userImage: UIKit.UIImage? { get set }
  var placeholderText: Swift.String { get set }
}
infix operator ?< : DefaultPrecedence
public enum Origin : Swift.String {
  case wallet
  case checkout
  case corporateBanking
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension Origin : Swift.Codable {
}
public struct ProfileModuleInputData {
  public let config: MoneyAuth.Config
  public let oauthToken: Swift.String
  public let customization: MoneyAuth.Customization
  public init(config: MoneyAuth.Config, oauthToken: Swift.String, customization: MoneyAuth.Customization)
}
public protocol ProfileModuleInput : AnyObject {
}
public protocol ProfileModuleOutput : AnyObject {
  func profileModule(_ module: MoneyAuth.ProfileModuleInput, didPressCloseWithAccount account: MoneyAuth.UserAccount?)
  func profileModule(_ module: MoneyAuth.ProfileModuleInput, didDismissWithAccount account: MoneyAuth.UserAccount?)
  func profileModule(_ module: MoneyAuth.ProfileModuleInput, didSuccessChangeEmailWithOldEmailWasEmpty oldEmailWasEmpty: Swift.Bool)
  func profileModule(_ module: MoneyAuth.ProfileModuleInput, didSuccessChangePasswordWith account: MoneyAuth.UserAccount)
  func profileModuleDidSuccessChangeName(_ module: MoneyAuth.ProfileModuleInput)
}
public protocol ChangePasswordCoordinatorDelegate : AnyObject {
  func changePasswordCoordinatorDidCancel(_ coordinator: MoneyAuth.ChangePasswordCoordinator)
  func changePasswordCoordinatorDidPrepareProcess(_ coordinator: MoneyAuth.ChangePasswordCoordinator)
  func changePasswordCoordinator(_ coordinator: MoneyAuth.ChangePasswordCoordinator, didFailPrepareProcessWith error: Swift.Error)
  func changePasswordCoordinator(_ coordinator: MoneyAuth.ChangePasswordCoordinator, didFailureWith error: Swift.Error)
  func changePasswordCoordinator(_ coordinator: MoneyAuth.ChangePasswordCoordinator, didSuccessWith account: MoneyAuth.UserAccount)
}
final public class ChangePasswordCoordinator {
  public init(config: MoneyAuth.Config, oauthToken: Swift.String, customization: MoneyAuth.Customization)
  @objc deinit
  weak final public var delegate: MoneyAuth.ChangePasswordCoordinatorDelegate?
  final public func makeInitialViewController() throws -> UIKit.UIViewController
  final public func prepareProcess()
}
extension ChangePasswordCoordinator : MoneyAuth.PasswordRecoveryCoordinatorDelegate {
  final public func passwordRecoveryCoordinatorDidSuccessProcess(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  final public func passwordRecoveryCoordinatorDidCancel(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  final public func passwordRecoveryCoordinatorDidPrepareProcess(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  final public func passwordRecoveryCoordinator(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator, didFailPrepareProcessWithError error: Swift.Error)
  final public func passwordRecoveryCoordinator(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator, didFailureWith error: Swift.Error)
}
public enum ProcessType {
  case enrollment
  case login
  case migration
  case changeEmail
  case changePassword
  case passwordRecovery
  public static func == (a: MoneyAuth.ProcessType, b: MoneyAuth.ProcessType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum ProfileAssembly {
  public static func makeModule(inputData: MoneyAuth.ProfileModuleInputData, output: MoneyAuth.ProfileModuleOutput?) -> UIKit.UIViewController
}
public enum SessionTicketMediatorFactory {
  public static func makeMediator(config: MoneyAuth.Config) -> MoneyAuth.SessionTicketMediator
}
public protocol AuthorizationCoordinatorDelegate : AnyObject {
  func authorizationCoordinatorDidCancel(_ coordinator: MoneyAuth.AuthorizationCoordinator)
  func authorizationCoordinatorDidPrepareProcess(_ coordinator: MoneyAuth.AuthorizationCoordinator)
  func authorizationCoordinator(_ coordinator: MoneyAuth.AuthorizationCoordinator, didFailPrepareProcessWithError error: Swift.Error)
  func authorizationCoordinator(_ coordinator: MoneyAuth.AuthorizationCoordinator, didFailureWith error: Swift.Error)
  func authorizationCoordinator(_ coordinator: MoneyAuth.AuthorizationCoordinator, didAcquireAuthorizationToken token: Swift.String, account: MoneyAuth.UserAccount, authorizationProcess: MoneyAuth.AuthorizationProcess?, tmxSessionId: Swift.String?, phoneOffersAccepted: Swift.Bool, emailOffersAccepted: Swift.Bool, userAgreementAccepted: Swift.Bool)
}
final public class AuthorizationCoordinator {
  public init(processType: MoneyAuth.AuthorizationProcessType, config: MoneyAuth.Config, customization: MoneyAuth.Customization)
  @objc deinit
  weak final public var delegate: MoneyAuth.AuthorizationCoordinatorDelegate?
  final public func makeInitialViewController() throws -> UIKit.UIViewController
  final public func prepareProcess()
}
extension AuthorizationCoordinator : MoneyAuth.PasswordRecoveryCoordinatorDelegate {
  final public func passwordRecoveryCoordinatorDidSuccessProcess(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  final public func passwordRecoveryCoordinatorDidCancel(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  final public func passwordRecoveryCoordinatorDidPrepareProcess(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  final public func passwordRecoveryCoordinator(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator, didFailPrepareProcessWithError error: Swift.Error)
  final public func passwordRecoveryCoordinator(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator, didFailureWith error: Swift.Error)
}
public struct UserAccount {
  public let uid: Swift.String
  public let email: MoneyAuth.UserAccount.EmailInfo
  public let phone: MoneyAuth.UserAccount.PhoneInfo
  public let displayName: MoneyAuth.UserAccount.DisplayNameInfo
  public let password: MoneyAuth.UserAccount.PasswordInfo
  public let avatar: MoneyAuth.UserAccount.AvatarInfo
  public let language: MoneyAuth.UserAccount.LanguageInfo
  public let services: [MoneyAuth.Service]
  public struct EmailInfo {
    public let title: Swift.String?
    public let modifiable: Swift.Bool
  }
  public struct PhoneInfo {
    public let title: Swift.String?
    public let modifiable: Swift.Bool
  }
  public struct DisplayNameInfo {
    public let title: Swift.String?
    public let modifiable: Swift.Bool
  }
  public struct PasswordInfo {
    public let modifiable: Swift.Bool
  }
  public struct AvatarInfo {
    public let url: Foundation.URL?
  }
  public struct LanguageInfo {
    public let value: Swift.String?
    public let modifiable: Swift.Bool
  }
}
extension UserAccount : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension UserAccount.EmailInfo : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension UserAccount.PhoneInfo : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension UserAccount.DisplayNameInfo : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension UserAccount.PasswordInfo : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension UserAccount.AvatarInfo : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension UserAccount.LanguageInfo : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Service {
  public let type: MoneyAuth.Origin?
  public let title: Swift.String
  public let logoUrl: Foundation.URL?
}
extension Service : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public protocol SessionTicketMediator {
  func fetchTicket(completion: @escaping (FunctionalSwift.Result<Swift.String>) -> Swift.Void)
  func verifyTicket(_ ticket: Swift.String, completion: @escaping (FunctionalSwift.Result<Swift.String>) -> Swift.Void)
}
public protocol AccountService {
  func fetchAccount(oauthToken: Swift.String, completion: @escaping (FunctionalSwift.Result<MoneyAuth.UserAccount>) -> Swift.Void)
  func changeDisplayName(oauthToken: Swift.String, displayName: Swift.String, completion: @escaping (FunctionalSwift.Result<MoneyAuth.UserAccount>) -> Swift.Void)
  func changeLanguage(oauthToken: Swift.String, language: Swift.String, completion: @escaping (FunctionalSwift.Result<MoneyAuth.UserAccount>) -> Swift.Void)
}
public enum AuthorizationProcess {
  case login
  case enrollment
  case migration
  public static func == (a: MoneyAuth.AuthorizationProcess, b: MoneyAuth.AuthorizationProcess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum AccountServiceFactory {
  public static func makeService(config: MoneyAuth.Config) -> MoneyAuth.AccountService
}
public protocol ChangeEmailCoordinatorDelegate : AnyObject {
  func changeEmailCoordinatorDidCancel(_ coordinator: MoneyAuth.ChangeEmailCoordinator)
  func changeEmailCoordinatorDidPrepareProcess(_ coordinator: MoneyAuth.ChangeEmailCoordinator)
  func changeEmailCoordinator(_ coordinator: MoneyAuth.ChangeEmailCoordinator, didFailPrepareProcessWithError error: Swift.Error)
  func changeEmailCoordinator(_ coordinator: MoneyAuth.ChangeEmailCoordinator, didFailureWith error: Swift.Error)
  func changeEmailCoordinator(_ coordinator: MoneyAuth.ChangeEmailCoordinator, didSuccessWith account: MoneyAuth.UserAccount)
}
final public class ChangeEmailCoordinator {
  public init(config: MoneyAuth.Config, oauthToken: Swift.String, oldEmailIsEmpty: Swift.Bool, customization: MoneyAuth.Customization)
  @objc deinit
  weak final public var delegate: MoneyAuth.ChangeEmailCoordinatorDelegate?
  final public func makeInitialViewController() throws -> UIKit.UIViewController
  final public func prepareProcess()
}
extension ChangeEmailCoordinator : MoneyAuth.PasswordRecoveryCoordinatorDelegate {
  final public func passwordRecoveryCoordinatorDidSuccessProcess(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  final public func passwordRecoveryCoordinatorDidCancel(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  final public func passwordRecoveryCoordinatorDidPrepareProcess(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  final public func passwordRecoveryCoordinator(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator, didFailPrepareProcessWithError error: Swift.Error)
  final public func passwordRecoveryCoordinator(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator, didFailureWith error: Swift.Error)
}
public enum AuthorizationProcessType {
  case enrollment
  case login
  case migration(yandexToken: Swift.String?)
}
public enum ProcessCoordinatorError : Swift.Error {
  case `internal`
  case invalidConfigParameter(Swift.String)
  case alreadyStarted
  case unsupportedStep
}
public enum RevokeTokenResult {
  case success
  case error(Swift.Error)
}
public protocol RevokeTokenService {
  func revoke(oauthToken: Swift.String, completion: @escaping (MoneyAuth.RevokeTokenResult) -> Swift.Void)
}
public enum RevokeTokenServiceFactory {
  public static func makeService(config: MoneyAuth.Config) -> MoneyAuth.RevokeTokenService
}
public protocol PasswordRecoveryCoordinatorDelegate : AnyObject {
  func passwordRecoveryCoordinatorDidCancel(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  func passwordRecoveryCoordinatorDidPrepareProcess(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
  func passwordRecoveryCoordinator(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator, didFailPrepareProcessWithError error: Swift.Error)
  func passwordRecoveryCoordinator(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator, didFailureWith error: Swift.Error)
  func passwordRecoveryCoordinatorDidSuccessProcess(_ coordinator: MoneyAuth.PasswordRecoveryCoordinator)
}
final public class PasswordRecoveryCoordinator {
  public init(config: MoneyAuth.Config, customization: MoneyAuth.Customization)
  @objc deinit
  weak final public var delegate: MoneyAuth.PasswordRecoveryCoordinatorDelegate?
  final public func makeInitialViewController() throws -> UIKit.UIViewController
  final public func prepareProcess()
}
public struct DisplayNameModuleInputData {
  public enum Preset {
    case new
    case change
    public static func == (a: MoneyAuth.DisplayNameModuleInputData.Preset, b: MoneyAuth.DisplayNameModuleInputData.Preset) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public let config: MoneyAuth.Config
  public let oauthToken: Swift.String
  public let preset: MoneyAuth.DisplayNameModuleInputData.Preset
  public init(config: MoneyAuth.Config, preset: MoneyAuth.DisplayNameModuleInputData.Preset, oauthToken: Swift.String)
}
public protocol DisplayNameModuleInput {
}
public protocol DisplayNameModuleOutput : AnyObject {
  func displayNameModule(_ module: MoneyAuth.DisplayNameModuleInput, didCreateNameInfo info: MoneyAuth.UserAccount.DisplayNameInfo)
  func displayNameModule(_ module: MoneyAuth.DisplayNameModuleInput, didChangeNameInfo info: MoneyAuth.UserAccount.DisplayNameInfo)
}
public enum MigrationInformationAssembly {
  public static func makeModule(inputData: MoneyAuth.MigrationInformationModuleInputData, moduleOutput: MoneyAuth.MigrationInformationModuleOutput? = nil) -> UIKit.UIViewController
}
public struct MigrationInformationModuleInputData {
  public let title: Swift.String
  public let text: Swift.String
  public let buttonTitle: Swift.String?
  public let conditionsText: Swift.String
  public init(title: Swift.String, text: Swift.String, buttonTitle: Swift.String?, conditionsText: Swift.String)
}
public protocol MigrationInformationModuleInput : AnyObject {
}
public protocol MigrationInformationModuleOutput : AnyObject {
  func migrationInformationModuleDidPressClose(_ module: MoneyAuth.MigrationInformationModuleInput)
  func migrationInformationModuleDidPressSubmit(_ module: MoneyAuth.MigrationInformationModuleInput)
  func migrationInformationModule(_ module: MoneyAuth.MigrationInformationModuleInput, referer: Swift.String)
}
public struct Customization {
  public let restorePasswordEnabled: Swift.Bool
  public let userAgreementTitle: Swift.String?
  public let userWithEmailAgreementTitle: Swift.String?
  public let emailCheckboxVisible: Swift.Bool
  public let emailCheckboxTitle: Swift.String?
  public let addEmailTitle: Swift.String?
  public let migrationScreenTitle: Swift.String?
  public let migrationScreenSubtitle: Swift.String?
  public let migrationScreenButtonSubtitle: Swift.String?
  public let hardMigrationScreenTitle: Swift.String?
  public let hardMigrationScreenSubtitle: Swift.String?
  public let hardMigrationScreenButtonSubtitle: Swift.String?
  public let migrationBannerVisible: Swift.Bool
  public let migrationBannerText: Swift.String?
  public let migrationBannerTextColor: Swift.String?
  public let migrationBannerButtonText: Swift.String?
  public let migrationBannerImageUrl: Foundation.URL?
  public init(restorePasswordEnabled: Swift.Bool = false, userAgreementTitle: Swift.String? = nil, userWithEmailAgreementTitle: Swift.String? = nil, emailCheckboxVisible: Swift.Bool = false, emailCheckboxTitle: Swift.String? = nil, addEmailTitle: Swift.String? = nil, migrationScreenTitle: Swift.String? = nil, migrationScreenSubtitle: Swift.String? = nil, migrationScreenButtonSubtitle: Swift.String? = nil, hardMigrationScreenTitle: Swift.String? = nil, hardMigrationScreenSubtitle: Swift.String? = nil, hardMigrationScreenButtonSubtitle: Swift.String? = nil, migrationBannerVisible: Swift.Bool = false, migrationBannerText: Swift.String? = nil, migrationBannerTextColor: Swift.String? = nil, migrationBannerButtonText: Swift.String? = nil, migrationBannerImageUrl: Foundation.URL? = nil)
}
extension MoneyAuth.UnauthorizedError : Swift.Encodable {}
extension MoneyAuth.UnauthorizedError : Swift.Decodable {}
extension MoneyAuth.UnauthorizedError : Swift.Error {}
extension MoneyAuth.UnauthorizedError : Swift.Equatable {}
extension MoneyAuth.UnauthorizedError : Swift.Hashable {}
extension MoneyAuth.Origin : Swift.Hashable {}
extension MoneyAuth.Origin : Swift.RawRepresentable {}
extension MoneyAuth.ProcessType : Swift.Hashable {}
extension MoneyAuth.AuthorizationProcess : Swift.Equatable {}
extension MoneyAuth.AuthorizationProcess : Swift.Hashable {}
extension MoneyAuth.DisplayNameModuleInputData.Preset : Swift.Hashable {}
